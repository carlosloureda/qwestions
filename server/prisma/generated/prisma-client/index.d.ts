// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  answer: (where?: AnswerWhereInput) => Promise<boolean>;
  question: (where?: QuestionWhereInput) => Promise<boolean>;
  quiz: (where?: QuizWhereInput) => Promise<boolean>;
  submission: (where?: SubmissionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  answer: (where: AnswerWhereUniqueInput) => AnswerNullablePromise;
  answers: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Answer>;
  answersConnection: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AnswerConnectionPromise;
  question: (where: QuestionWhereUniqueInput) => QuestionNullablePromise;
  questions: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Question>;
  questionsConnection: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuestionConnectionPromise;
  quiz: (where: QuizWhereUniqueInput) => QuizNullablePromise;
  quizzes: (args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Quiz>;
  quizzesConnection: (args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuizConnectionPromise;
  submission: (where: SubmissionWhereUniqueInput) => SubmissionNullablePromise;
  submissions: (args?: {
    where?: SubmissionWhereInput;
    orderBy?: SubmissionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Submission>;
  submissionsConnection: (args?: {
    where?: SubmissionWhereInput;
    orderBy?: SubmissionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SubmissionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAnswer: (data: AnswerCreateInput) => AnswerPromise;
  updateAnswer: (args: {
    data: AnswerUpdateInput;
    where: AnswerWhereUniqueInput;
  }) => AnswerPromise;
  updateManyAnswers: (args: {
    data: AnswerUpdateManyMutationInput;
    where?: AnswerWhereInput;
  }) => BatchPayloadPromise;
  upsertAnswer: (args: {
    where: AnswerWhereUniqueInput;
    create: AnswerCreateInput;
    update: AnswerUpdateInput;
  }) => AnswerPromise;
  deleteAnswer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  deleteManyAnswers: (where?: AnswerWhereInput) => BatchPayloadPromise;
  createQuestion: (data: QuestionCreateInput) => QuestionPromise;
  updateQuestion: (args: {
    data: QuestionUpdateInput;
    where: QuestionWhereUniqueInput;
  }) => QuestionPromise;
  updateManyQuestions: (args: {
    data: QuestionUpdateManyMutationInput;
    where?: QuestionWhereInput;
  }) => BatchPayloadPromise;
  upsertQuestion: (args: {
    where: QuestionWhereUniqueInput;
    create: QuestionCreateInput;
    update: QuestionUpdateInput;
  }) => QuestionPromise;
  deleteQuestion: (where: QuestionWhereUniqueInput) => QuestionPromise;
  deleteManyQuestions: (where?: QuestionWhereInput) => BatchPayloadPromise;
  createQuiz: (data: QuizCreateInput) => QuizPromise;
  updateQuiz: (args: {
    data: QuizUpdateInput;
    where: QuizWhereUniqueInput;
  }) => QuizPromise;
  updateManyQuizzes: (args: {
    data: QuizUpdateManyMutationInput;
    where?: QuizWhereInput;
  }) => BatchPayloadPromise;
  upsertQuiz: (args: {
    where: QuizWhereUniqueInput;
    create: QuizCreateInput;
    update: QuizUpdateInput;
  }) => QuizPromise;
  deleteQuiz: (where: QuizWhereUniqueInput) => QuizPromise;
  deleteManyQuizzes: (where?: QuizWhereInput) => BatchPayloadPromise;
  createSubmission: (data: SubmissionCreateInput) => SubmissionPromise;
  updateSubmission: (args: {
    data: SubmissionUpdateInput;
    where: SubmissionWhereUniqueInput;
  }) => SubmissionPromise;
  upsertSubmission: (args: {
    where: SubmissionWhereUniqueInput;
    create: SubmissionCreateInput;
    update: SubmissionUpdateInput;
  }) => SubmissionPromise;
  deleteSubmission: (where: SubmissionWhereUniqueInput) => SubmissionPromise;
  deleteManySubmissions: (where?: SubmissionWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  answer: (
    where?: AnswerSubscriptionWhereInput
  ) => AnswerSubscriptionPayloadSubscription;
  question: (
    where?: QuestionSubscriptionWhereInput
  ) => QuestionSubscriptionPayloadSubscription;
  quiz: (
    where?: QuizSubscriptionWhereInput
  ) => QuizSubscriptionPayloadSubscription;
  submission: (
    where?: SubmissionSubscriptionWhereInput
  ) => SubmissionSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type QuizOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type QuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "answer_type_ASC"
  | "answer_type_DESC"
  | "theme_ASC"
  | "theme_DESC"
  | "language_code_ASC"
  | "language_code_DESC";

export type AnswerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "is_valid_ASC"
  | "is_valid_DESC";

export type SubmissionOrderByInput = "id_ASC" | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AnswerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface QuizWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<QuizWhereInput[] | QuizWhereInput>;
  OR?: Maybe<QuizWhereInput[] | QuizWhereInput>;
  NOT?: Maybe<QuizWhereInput[] | QuizWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface QuestionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quiz_every?: Maybe<QuizWhereInput>;
  quiz_some?: Maybe<QuizWhereInput>;
  quiz_none?: Maybe<QuizWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  answer_type?: Maybe<String>;
  answer_type_not?: Maybe<String>;
  answer_type_in?: Maybe<String[] | String>;
  answer_type_not_in?: Maybe<String[] | String>;
  answer_type_lt?: Maybe<String>;
  answer_type_lte?: Maybe<String>;
  answer_type_gt?: Maybe<String>;
  answer_type_gte?: Maybe<String>;
  answer_type_contains?: Maybe<String>;
  answer_type_not_contains?: Maybe<String>;
  answer_type_starts_with?: Maybe<String>;
  answer_type_not_starts_with?: Maybe<String>;
  answer_type_ends_with?: Maybe<String>;
  answer_type_not_ends_with?: Maybe<String>;
  theme?: Maybe<String>;
  theme_not?: Maybe<String>;
  theme_in?: Maybe<String[] | String>;
  theme_not_in?: Maybe<String[] | String>;
  theme_lt?: Maybe<String>;
  theme_lte?: Maybe<String>;
  theme_gt?: Maybe<String>;
  theme_gte?: Maybe<String>;
  theme_contains?: Maybe<String>;
  theme_not_contains?: Maybe<String>;
  theme_starts_with?: Maybe<String>;
  theme_not_starts_with?: Maybe<String>;
  theme_ends_with?: Maybe<String>;
  theme_not_ends_with?: Maybe<String>;
  language_code?: Maybe<String>;
  language_code_not?: Maybe<String>;
  language_code_in?: Maybe<String[] | String>;
  language_code_not_in?: Maybe<String[] | String>;
  language_code_lt?: Maybe<String>;
  language_code_lte?: Maybe<String>;
  language_code_gt?: Maybe<String>;
  language_code_gte?: Maybe<String>;
  language_code_contains?: Maybe<String>;
  language_code_not_contains?: Maybe<String>;
  language_code_starts_with?: Maybe<String>;
  language_code_not_starts_with?: Maybe<String>;
  language_code_ends_with?: Maybe<String>;
  language_code_not_ends_with?: Maybe<String>;
  AND?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  OR?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  NOT?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
}

export interface AnswerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quiz_every?: Maybe<QuizWhereInput>;
  quiz_some?: Maybe<QuizWhereInput>;
  quiz_none?: Maybe<QuizWhereInput>;
  user_every?: Maybe<UserWhereInput>;
  user_some?: Maybe<UserWhereInput>;
  user_none?: Maybe<UserWhereInput>;
  question_every?: Maybe<QuestionWhereInput>;
  question_some?: Maybe<QuestionWhereInput>;
  question_none?: Maybe<QuestionWhereInput>;
  is_valid?: Maybe<Boolean>;
  is_valid_not?: Maybe<Boolean>;
  AND?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  OR?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  NOT?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
}

export type QuestionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type QuizWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SubmissionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SubmissionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quiz_every?: Maybe<QuizWhereInput>;
  quiz_some?: Maybe<QuizWhereInput>;
  quiz_none?: Maybe<QuizWhereInput>;
  user_every?: Maybe<UserWhereInput>;
  user_some?: Maybe<UserWhereInput>;
  user_none?: Maybe<UserWhereInput>;
  AND?: Maybe<SubmissionWhereInput[] | SubmissionWhereInput>;
  OR?: Maybe<SubmissionWhereInput[] | SubmissionWhereInput>;
  NOT?: Maybe<SubmissionWhereInput[] | SubmissionWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AnswerCreateInput {
  id?: Maybe<ID_Input>;
  quiz?: Maybe<QuizCreateManyInput>;
  user?: Maybe<UserCreateManyInput>;
  question?: Maybe<QuestionCreateManyInput>;
  answer?: Maybe<AnswerCreateanswerInput>;
  is_valid?: Maybe<Boolean>;
}

export interface QuizCreateManyInput {
  create?: Maybe<QuizCreateInput[] | QuizCreateInput>;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
}

export interface QuizCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface QuestionCreateManyInput {
  create?: Maybe<QuestionCreateInput[] | QuestionCreateInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateInput {
  id?: Maybe<ID_Input>;
  quiz?: Maybe<QuizCreateManyInput>;
  title: String;
  right_answer?: Maybe<QuestionCreateright_answerInput>;
  answer_type?: Maybe<String>;
  theme?: Maybe<String>;
  language_code?: Maybe<String>;
}

export interface QuestionCreateright_answerInput {
  set?: Maybe<String[] | String>;
}

export interface AnswerCreateanswerInput {
  set?: Maybe<String[] | String>;
}

export interface AnswerUpdateInput {
  quiz?: Maybe<QuizUpdateManyInput>;
  user?: Maybe<UserUpdateManyInput>;
  question?: Maybe<QuestionUpdateManyInput>;
  answer?: Maybe<AnswerUpdateanswerInput>;
  is_valid?: Maybe<Boolean>;
}

export interface QuizUpdateManyInput {
  create?: Maybe<QuizCreateInput[] | QuizCreateInput>;
  update?: Maybe<
    | QuizUpdateWithWhereUniqueNestedInput[]
    | QuizUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | QuizUpsertWithWhereUniqueNestedInput[]
    | QuizUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  set?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  disconnect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  deleteMany?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
  updateMany?: Maybe<
    QuizUpdateManyWithWhereNestedInput[] | QuizUpdateManyWithWhereNestedInput
  >;
}

export interface QuizUpdateWithWhereUniqueNestedInput {
  where: QuizWhereUniqueInput;
  data: QuizUpdateDataInput;
}

export interface QuizUpdateDataInput {
  title?: Maybe<String>;
}

export interface QuizUpsertWithWhereUniqueNestedInput {
  where: QuizWhereUniqueInput;
  update: QuizUpdateDataInput;
  create: QuizCreateInput;
}

export interface QuizScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
  OR?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
  NOT?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
}

export interface QuizUpdateManyWithWhereNestedInput {
  where: QuizScalarWhereInput;
  data: QuizUpdateManyDataInput;
}

export interface QuizUpdateManyDataInput {
  title?: Maybe<String>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface QuestionUpdateManyInput {
  create?: Maybe<QuestionCreateInput[] | QuestionCreateInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueNestedInput[]
    | QuestionUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueNestedInput[]
    | QuestionUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateDataInput;
}

export interface QuestionUpdateDataInput {
  quiz?: Maybe<QuizUpdateManyInput>;
  title?: Maybe<String>;
  right_answer?: Maybe<QuestionUpdateright_answerInput>;
  answer_type?: Maybe<String>;
  theme?: Maybe<String>;
  language_code?: Maybe<String>;
}

export interface QuestionUpdateright_answerInput {
  set?: Maybe<String[] | String>;
}

export interface QuestionUpsertWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateDataInput;
  create: QuestionCreateInput;
}

export interface QuestionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  answer_type?: Maybe<String>;
  answer_type_not?: Maybe<String>;
  answer_type_in?: Maybe<String[] | String>;
  answer_type_not_in?: Maybe<String[] | String>;
  answer_type_lt?: Maybe<String>;
  answer_type_lte?: Maybe<String>;
  answer_type_gt?: Maybe<String>;
  answer_type_gte?: Maybe<String>;
  answer_type_contains?: Maybe<String>;
  answer_type_not_contains?: Maybe<String>;
  answer_type_starts_with?: Maybe<String>;
  answer_type_not_starts_with?: Maybe<String>;
  answer_type_ends_with?: Maybe<String>;
  answer_type_not_ends_with?: Maybe<String>;
  theme?: Maybe<String>;
  theme_not?: Maybe<String>;
  theme_in?: Maybe<String[] | String>;
  theme_not_in?: Maybe<String[] | String>;
  theme_lt?: Maybe<String>;
  theme_lte?: Maybe<String>;
  theme_gt?: Maybe<String>;
  theme_gte?: Maybe<String>;
  theme_contains?: Maybe<String>;
  theme_not_contains?: Maybe<String>;
  theme_starts_with?: Maybe<String>;
  theme_not_starts_with?: Maybe<String>;
  theme_ends_with?: Maybe<String>;
  theme_not_ends_with?: Maybe<String>;
  language_code?: Maybe<String>;
  language_code_not?: Maybe<String>;
  language_code_in?: Maybe<String[] | String>;
  language_code_not_in?: Maybe<String[] | String>;
  language_code_lt?: Maybe<String>;
  language_code_lte?: Maybe<String>;
  language_code_gt?: Maybe<String>;
  language_code_gte?: Maybe<String>;
  language_code_contains?: Maybe<String>;
  language_code_not_contains?: Maybe<String>;
  language_code_starts_with?: Maybe<String>;
  language_code_not_starts_with?: Maybe<String>;
  language_code_ends_with?: Maybe<String>;
  language_code_not_ends_with?: Maybe<String>;
  AND?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  OR?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  NOT?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
}

export interface QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput;
  data: QuestionUpdateManyDataInput;
}

export interface QuestionUpdateManyDataInput {
  title?: Maybe<String>;
  right_answer?: Maybe<QuestionUpdateright_answerInput>;
  answer_type?: Maybe<String>;
  theme?: Maybe<String>;
  language_code?: Maybe<String>;
}

export interface AnswerUpdateanswerInput {
  set?: Maybe<String[] | String>;
}

export interface AnswerUpdateManyMutationInput {
  answer?: Maybe<AnswerUpdateanswerInput>;
  is_valid?: Maybe<Boolean>;
}

export interface QuestionUpdateInput {
  quiz?: Maybe<QuizUpdateManyInput>;
  title?: Maybe<String>;
  right_answer?: Maybe<QuestionUpdateright_answerInput>;
  answer_type?: Maybe<String>;
  theme?: Maybe<String>;
  language_code?: Maybe<String>;
}

export interface QuestionUpdateManyMutationInput {
  title?: Maybe<String>;
  right_answer?: Maybe<QuestionUpdateright_answerInput>;
  answer_type?: Maybe<String>;
  theme?: Maybe<String>;
  language_code?: Maybe<String>;
}

export interface QuizUpdateInput {
  title?: Maybe<String>;
}

export interface QuizUpdateManyMutationInput {
  title?: Maybe<String>;
}

export interface SubmissionCreateInput {
  id?: Maybe<ID_Input>;
  quiz?: Maybe<QuizCreateManyInput>;
  user?: Maybe<UserCreateManyInput>;
}

export interface SubmissionUpdateInput {
  quiz?: Maybe<QuizUpdateManyInput>;
  user?: Maybe<UserUpdateManyInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface AnswerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AnswerWhereInput>;
  AND?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  OR?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  NOT?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
}

export interface QuestionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuestionWhereInput>;
  AND?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
  OR?: Maybe<QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput>;
  NOT?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
}

export interface QuizSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuizWhereInput>;
  AND?: Maybe<QuizSubscriptionWhereInput[] | QuizSubscriptionWhereInput>;
  OR?: Maybe<QuizSubscriptionWhereInput[] | QuizSubscriptionWhereInput>;
  NOT?: Maybe<QuizSubscriptionWhereInput[] | QuizSubscriptionWhereInput>;
}

export interface SubmissionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SubmissionWhereInput>;
  AND?: Maybe<
    SubmissionSubscriptionWhereInput[] | SubmissionSubscriptionWhereInput
  >;
  OR?: Maybe<
    SubmissionSubscriptionWhereInput[] | SubmissionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SubmissionSubscriptionWhereInput[] | SubmissionSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Answer {
  id: ID_Output;
  answer: String[];
  is_valid?: Boolean;
}

export interface AnswerPromise extends Promise<Answer>, Fragmentable {
  id: () => Promise<ID_Output>;
  quiz: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  question: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  answer: () => Promise<String[]>;
  is_valid: () => Promise<Boolean>;
}

export interface AnswerSubscription
  extends Promise<AsyncIterator<Answer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quiz: <T = Promise<AsyncIterator<QuizSubscription>>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  question: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  answer: () => Promise<AsyncIterator<String[]>>;
  is_valid: () => Promise<AsyncIterator<Boolean>>;
}

export interface AnswerNullablePromise
  extends Promise<Answer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quiz: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  question: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  answer: () => Promise<String[]>;
  is_valid: () => Promise<Boolean>;
}

export interface Quiz {
  id: ID_Output;
  title: String;
}

export interface QuizPromise extends Promise<Quiz>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface QuizSubscription
  extends Promise<AsyncIterator<Quiz>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface QuizNullablePromise
  extends Promise<Quiz | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface Question {
  id: ID_Output;
  title: String;
  right_answer: String[];
  answer_type?: String;
  theme?: String;
  language_code?: String;
}

export interface QuestionPromise extends Promise<Question>, Fragmentable {
  id: () => Promise<ID_Output>;
  quiz: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<String>;
  right_answer: () => Promise<String[]>;
  answer_type: () => Promise<String>;
  theme: () => Promise<String>;
  language_code: () => Promise<String>;
}

export interface QuestionSubscription
  extends Promise<AsyncIterator<Question>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quiz: <T = Promise<AsyncIterator<QuizSubscription>>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<AsyncIterator<String>>;
  right_answer: () => Promise<AsyncIterator<String[]>>;
  answer_type: () => Promise<AsyncIterator<String>>;
  theme: () => Promise<AsyncIterator<String>>;
  language_code: () => Promise<AsyncIterator<String>>;
}

export interface QuestionNullablePromise
  extends Promise<Question | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quiz: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<String>;
  right_answer: () => Promise<String[]>;
  answer_type: () => Promise<String>;
  theme: () => Promise<String>;
  language_code: () => Promise<String>;
}

export interface AnswerConnection {
  pageInfo: PageInfo;
  edges: AnswerEdge[];
}

export interface AnswerConnectionPromise
  extends Promise<AnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerEdge>>() => T;
  aggregate: <T = AggregateAnswerPromise>() => T;
}

export interface AnswerConnectionSubscription
  extends Promise<AsyncIterator<AnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AnswerEdge {
  node: Answer;
  cursor: String;
}

export interface AnswerEdgePromise extends Promise<AnswerEdge>, Fragmentable {
  node: <T = AnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerEdgeSubscription
  extends Promise<AsyncIterator<AnswerEdge>>,
    Fragmentable {
  node: <T = AnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAnswer {
  count: Int;
}

export interface AggregateAnswerPromise
  extends Promise<AggregateAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerSubscription
  extends Promise<AsyncIterator<AggregateAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QuestionConnection {
  pageInfo: PageInfo;
  edges: QuestionEdge[];
}

export interface QuestionConnectionPromise
  extends Promise<QuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuestionEdge>>() => T;
  aggregate: <T = AggregateQuestionPromise>() => T;
}

export interface QuestionConnectionSubscription
  extends Promise<AsyncIterator<QuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionSubscription>() => T;
}

export interface QuestionEdge {
  node: Question;
  cursor: String;
}

export interface QuestionEdgePromise
  extends Promise<QuestionEdge>,
    Fragmentable {
  node: <T = QuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionEdgeSubscription
  extends Promise<AsyncIterator<QuestionEdge>>,
    Fragmentable {
  node: <T = QuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuestion {
  count: Int;
}

export interface AggregateQuestionPromise
  extends Promise<AggregateQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionSubscription
  extends Promise<AsyncIterator<AggregateQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QuizConnection {
  pageInfo: PageInfo;
  edges: QuizEdge[];
}

export interface QuizConnectionPromise
  extends Promise<QuizConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuizEdge>>() => T;
  aggregate: <T = AggregateQuizPromise>() => T;
}

export interface QuizConnectionSubscription
  extends Promise<AsyncIterator<QuizConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuizEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuizSubscription>() => T;
}

export interface QuizEdge {
  node: Quiz;
  cursor: String;
}

export interface QuizEdgePromise extends Promise<QuizEdge>, Fragmentable {
  node: <T = QuizPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuizEdgeSubscription
  extends Promise<AsyncIterator<QuizEdge>>,
    Fragmentable {
  node: <T = QuizSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuiz {
  count: Int;
}

export interface AggregateQuizPromise
  extends Promise<AggregateQuiz>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuizSubscription
  extends Promise<AsyncIterator<AggregateQuiz>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Submission {
  id: ID_Output;
}

export interface SubmissionPromise extends Promise<Submission>, Fragmentable {
  id: () => Promise<ID_Output>;
  quiz: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SubmissionSubscription
  extends Promise<AsyncIterator<Submission>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quiz: <T = Promise<AsyncIterator<QuizSubscription>>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SubmissionNullablePromise
  extends Promise<Submission | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quiz: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SubmissionConnection {
  pageInfo: PageInfo;
  edges: SubmissionEdge[];
}

export interface SubmissionConnectionPromise
  extends Promise<SubmissionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubmissionEdge>>() => T;
  aggregate: <T = AggregateSubmissionPromise>() => T;
}

export interface SubmissionConnectionSubscription
  extends Promise<AsyncIterator<SubmissionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubmissionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubmissionSubscription>() => T;
}

export interface SubmissionEdge {
  node: Submission;
  cursor: String;
}

export interface SubmissionEdgePromise
  extends Promise<SubmissionEdge>,
    Fragmentable {
  node: <T = SubmissionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubmissionEdgeSubscription
  extends Promise<AsyncIterator<SubmissionEdge>>,
    Fragmentable {
  node: <T = SubmissionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubmission {
  count: Int;
}

export interface AggregateSubmissionPromise
  extends Promise<AggregateSubmission>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubmissionSubscription
  extends Promise<AsyncIterator<AggregateSubmission>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AnswerSubscriptionPayload {
  mutation: MutationType;
  node: Answer;
  updatedFields: String[];
  previousValues: AnswerPreviousValues;
}

export interface AnswerSubscriptionPayloadPromise
  extends Promise<AnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerPreviousValuesPromise>() => T;
}

export interface AnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerPreviousValuesSubscription>() => T;
}

export interface AnswerPreviousValues {
  id: ID_Output;
  answer: String[];
  is_valid?: Boolean;
}

export interface AnswerPreviousValuesPromise
  extends Promise<AnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  answer: () => Promise<String[]>;
  is_valid: () => Promise<Boolean>;
}

export interface AnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  answer: () => Promise<AsyncIterator<String[]>>;
  is_valid: () => Promise<AsyncIterator<Boolean>>;
}

export interface QuestionSubscriptionPayload {
  mutation: MutationType;
  node: Question;
  updatedFields: String[];
  previousValues: QuestionPreviousValues;
}

export interface QuestionSubscriptionPayloadPromise
  extends Promise<QuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionPreviousValuesPromise>() => T;
}

export interface QuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionPreviousValuesSubscription>() => T;
}

export interface QuestionPreviousValues {
  id: ID_Output;
  title: String;
  right_answer: String[];
  answer_type?: String;
  theme?: String;
  language_code?: String;
}

export interface QuestionPreviousValuesPromise
  extends Promise<QuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  right_answer: () => Promise<String[]>;
  answer_type: () => Promise<String>;
  theme: () => Promise<String>;
  language_code: () => Promise<String>;
}

export interface QuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  right_answer: () => Promise<AsyncIterator<String[]>>;
  answer_type: () => Promise<AsyncIterator<String>>;
  theme: () => Promise<AsyncIterator<String>>;
  language_code: () => Promise<AsyncIterator<String>>;
}

export interface QuizSubscriptionPayload {
  mutation: MutationType;
  node: Quiz;
  updatedFields: String[];
  previousValues: QuizPreviousValues;
}

export interface QuizSubscriptionPayloadPromise
  extends Promise<QuizSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuizPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuizPreviousValuesPromise>() => T;
}

export interface QuizSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuizSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuizSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuizPreviousValuesSubscription>() => T;
}

export interface QuizPreviousValues {
  id: ID_Output;
  title: String;
}

export interface QuizPreviousValuesPromise
  extends Promise<QuizPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface QuizPreviousValuesSubscription
  extends Promise<AsyncIterator<QuizPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface SubmissionSubscriptionPayload {
  mutation: MutationType;
  node: Submission;
  updatedFields: String[];
  previousValues: SubmissionPreviousValues;
}

export interface SubmissionSubscriptionPayloadPromise
  extends Promise<SubmissionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubmissionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubmissionPreviousValuesPromise>() => T;
}

export interface SubmissionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubmissionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubmissionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubmissionPreviousValuesSubscription>() => T;
}

export interface SubmissionPreviousValues {
  id: ID_Output;
}

export interface SubmissionPreviousValuesPromise
  extends Promise<SubmissionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface SubmissionPreviousValuesSubscription
  extends Promise<AsyncIterator<SubmissionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Quiz",
    embedded: false
  },
  {
    name: "Submission",
    embedded: false
  },
  {
    name: "Question",
    embedded: false
  },
  {
    name: "Answer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
