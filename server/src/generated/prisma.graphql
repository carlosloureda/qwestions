# source: https://eu1.prisma.sh/carlos-loureda-8b31b2/qwestion/dev
# timestamp: Tue Aug 06 2019 03:08:15 GMT+0200 (Central European Summer Time)

type AggregateAnswer {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateQuiz {
  count: Int!
}

type AggregateSubmission {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Answer implements Node {
  id: ID!
  quiz(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
  user(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  question(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  answer: [String!]!
  is_valid: Boolean
}

"""A connection to a list of items."""
type AnswerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnswerEdge]!
  aggregate: AggregateAnswer!
}

input AnswerCreateanswerInput {
  set: [String!]
}

input AnswerCreateInput {
  id: ID
  is_valid: Boolean
  answer: AnswerCreateanswerInput
  quiz: QuizCreateManyInput
  user: UserCreateManyInput
  question: QuestionCreateManyInput
}

"""An edge in a connection."""
type AnswerEdge {
  """The item at the end of the edge."""
  node: Answer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnswerOrderByInput {
  id_ASC
  id_DESC
  is_valid_ASC
  is_valid_DESC
}

type AnswerPreviousValues {
  id: ID!
  answer: [String!]!
  is_valid: Boolean
}

type AnswerSubscriptionPayload {
  mutation: MutationType!
  node: Answer
  updatedFields: [String!]
  previousValues: AnswerPreviousValues
}

input AnswerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnswerWhereInput
}

input AnswerUpdateanswerInput {
  set: [String!]
}

input AnswerUpdateInput {
  is_valid: Boolean
  answer: AnswerUpdateanswerInput
  quiz: QuizUpdateManyInput
  user: UserUpdateManyInput
  question: QuestionUpdateManyInput
}

input AnswerUpdateManyMutationInput {
  is_valid: Boolean
  answer: AnswerUpdateanswerInput
}

input AnswerWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  is_valid: Boolean

  """All values that are not equal to given value."""
  is_valid_not: Boolean
  quiz_every: QuizWhereInput
  quiz_some: QuizWhereInput
  quiz_none: QuizWhereInput
  user_every: UserWhereInput
  user_some: UserWhereInput
  user_none: UserWhereInput
  question_every: QuestionWhereInput
  question_some: QuestionWhereInput
  question_none: QuestionWhereInput
}

input AnswerWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createSubmission(data: SubmissionCreateInput!): Submission!
  createAnswer(data: AnswerCreateInput!): Answer!
  createQuiz(data: QuizCreateInput!): Quiz!
  createQuestion(data: QuestionCreateInput!): Question!
  createUser(data: UserCreateInput!): User!
  updateSubmission(data: SubmissionUpdateInput!, where: SubmissionWhereUniqueInput!): Submission
  updateAnswer(data: AnswerUpdateInput!, where: AnswerWhereUniqueInput!): Answer
  updateQuiz(data: QuizUpdateInput!, where: QuizWhereUniqueInput!): Quiz
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteSubmission(where: SubmissionWhereUniqueInput!): Submission
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteQuiz(where: QuizWhereUniqueInput!): Quiz
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteUser(where: UserWhereUniqueInput!): User
  upsertSubmission(where: SubmissionWhereUniqueInput!, create: SubmissionCreateInput!, update: SubmissionUpdateInput!): Submission!
  upsertAnswer(where: AnswerWhereUniqueInput!, create: AnswerCreateInput!, update: AnswerUpdateInput!): Answer!
  upsertQuiz(where: QuizWhereUniqueInput!, create: QuizCreateInput!, update: QuizUpdateInput!): Quiz!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyAnswers(data: AnswerUpdateManyMutationInput!, where: AnswerWhereInput): BatchPayload!
  updateManyQuizzes(data: QuizUpdateManyMutationInput!, where: QuizWhereInput): BatchPayload!
  updateManyQuestions(data: QuestionUpdateManyMutationInput!, where: QuestionWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManySubmissions(where: SubmissionWhereInput): BatchPayload!
  deleteManyAnswers(where: AnswerWhereInput): BatchPayload!
  deleteManyQuizzes(where: QuizWhereInput): BatchPayload!
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  submissions(where: SubmissionWhereInput, orderBy: SubmissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Submission]!
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer]!
  quizzes(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz]!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  submission(where: SubmissionWhereUniqueInput!): Submission
  answer(where: AnswerWhereUniqueInput!): Answer
  quiz(where: QuizWhereUniqueInput!): Quiz
  question(where: QuestionWhereUniqueInput!): Question
  user(where: UserWhereUniqueInput!): User
  submissionsConnection(where: SubmissionWhereInput, orderBy: SubmissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubmissionConnection!
  answersConnection(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnswerConnection!
  quizzesConnection(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuizConnection!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Question implements Node {
  id: ID!
  quiz(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
  title: String!
  right_answer: [String!]!
  answer_type: String
  theme: String
  language_code: String
}

"""A connection to a list of items."""
type QuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  id: ID
  title: String!
  answer_type: String
  theme: String
  language_code: String
  right_answer: QuestionCreateright_answerInput
  quiz: QuizCreateManyInput
}

input QuestionCreateManyInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateright_answerInput {
  set: [String!]
}

"""An edge in a connection."""
type QuestionEdge {
  """The item at the end of the edge."""
  node: Question!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  answer_type_ASC
  answer_type_DESC
  theme_ASC
  theme_DESC
  language_code_ASC
  language_code_DESC
}

type QuestionPreviousValues {
  id: ID!
  title: String!
  right_answer: [String!]!
  answer_type: String
  theme: String
  language_code: String
}

input QuestionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  answer_type: String

  """All values that are not equal to given value."""
  answer_type_not: String

  """All values that are contained in given list."""
  answer_type_in: [String!]

  """All values that are not contained in given list."""
  answer_type_not_in: [String!]

  """All values less than the given value."""
  answer_type_lt: String

  """All values less than or equal the given value."""
  answer_type_lte: String

  """All values greater than the given value."""
  answer_type_gt: String

  """All values greater than or equal the given value."""
  answer_type_gte: String

  """All values containing the given string."""
  answer_type_contains: String

  """All values not containing the given string."""
  answer_type_not_contains: String

  """All values starting with the given string."""
  answer_type_starts_with: String

  """All values not starting with the given string."""
  answer_type_not_starts_with: String

  """All values ending with the given string."""
  answer_type_ends_with: String

  """All values not ending with the given string."""
  answer_type_not_ends_with: String
  theme: String

  """All values that are not equal to given value."""
  theme_not: String

  """All values that are contained in given list."""
  theme_in: [String!]

  """All values that are not contained in given list."""
  theme_not_in: [String!]

  """All values less than the given value."""
  theme_lt: String

  """All values less than or equal the given value."""
  theme_lte: String

  """All values greater than the given value."""
  theme_gt: String

  """All values greater than or equal the given value."""
  theme_gte: String

  """All values containing the given string."""
  theme_contains: String

  """All values not containing the given string."""
  theme_not_contains: String

  """All values starting with the given string."""
  theme_starts_with: String

  """All values not starting with the given string."""
  theme_not_starts_with: String

  """All values ending with the given string."""
  theme_ends_with: String

  """All values not ending with the given string."""
  theme_not_ends_with: String
  language_code: String

  """All values that are not equal to given value."""
  language_code_not: String

  """All values that are contained in given list."""
  language_code_in: [String!]

  """All values that are not contained in given list."""
  language_code_not_in: [String!]

  """All values less than the given value."""
  language_code_lt: String

  """All values less than or equal the given value."""
  language_code_lte: String

  """All values greater than the given value."""
  language_code_gt: String

  """All values greater than or equal the given value."""
  language_code_gte: String

  """All values containing the given string."""
  language_code_contains: String

  """All values not containing the given string."""
  language_code_not_contains: String

  """All values starting with the given string."""
  language_code_starts_with: String

  """All values not starting with the given string."""
  language_code_not_starts_with: String

  """All values ending with the given string."""
  language_code_ends_with: String

  """All values not ending with the given string."""
  language_code_not_ends_with: String
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
}

input QuestionUpdateDataInput {
  title: String
  answer_type: String
  theme: String
  language_code: String
  right_answer: QuestionUpdateright_answerInput
  quiz: QuizUpdateManyInput
}

input QuestionUpdateInput {
  title: String
  answer_type: String
  theme: String
  language_code: String
  right_answer: QuestionUpdateright_answerInput
  quiz: QuizUpdateManyInput
}

input QuestionUpdateManyDataInput {
  title: String
  answer_type: String
  theme: String
  language_code: String
  right_answer: QuestionUpdateright_answerInput
}

input QuestionUpdateManyInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueNestedInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueNestedInput!]
}

input QuestionUpdateManyMutationInput {
  title: String
  answer_type: String
  theme: String
  language_code: String
  right_answer: QuestionUpdateright_answerInput
}

input QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput!
  data: QuestionUpdateManyDataInput!
}

input QuestionUpdateright_answerInput {
  set: [String!]
}

input QuestionUpdateWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateDataInput!
}

input QuestionUpsertWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateDataInput!
  create: QuestionCreateInput!
}

input QuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  answer_type: String

  """All values that are not equal to given value."""
  answer_type_not: String

  """All values that are contained in given list."""
  answer_type_in: [String!]

  """All values that are not contained in given list."""
  answer_type_not_in: [String!]

  """All values less than the given value."""
  answer_type_lt: String

  """All values less than or equal the given value."""
  answer_type_lte: String

  """All values greater than the given value."""
  answer_type_gt: String

  """All values greater than or equal the given value."""
  answer_type_gte: String

  """All values containing the given string."""
  answer_type_contains: String

  """All values not containing the given string."""
  answer_type_not_contains: String

  """All values starting with the given string."""
  answer_type_starts_with: String

  """All values not starting with the given string."""
  answer_type_not_starts_with: String

  """All values ending with the given string."""
  answer_type_ends_with: String

  """All values not ending with the given string."""
  answer_type_not_ends_with: String
  theme: String

  """All values that are not equal to given value."""
  theme_not: String

  """All values that are contained in given list."""
  theme_in: [String!]

  """All values that are not contained in given list."""
  theme_not_in: [String!]

  """All values less than the given value."""
  theme_lt: String

  """All values less than or equal the given value."""
  theme_lte: String

  """All values greater than the given value."""
  theme_gt: String

  """All values greater than or equal the given value."""
  theme_gte: String

  """All values containing the given string."""
  theme_contains: String

  """All values not containing the given string."""
  theme_not_contains: String

  """All values starting with the given string."""
  theme_starts_with: String

  """All values not starting with the given string."""
  theme_not_starts_with: String

  """All values ending with the given string."""
  theme_ends_with: String

  """All values not ending with the given string."""
  theme_not_ends_with: String
  language_code: String

  """All values that are not equal to given value."""
  language_code_not: String

  """All values that are contained in given list."""
  language_code_in: [String!]

  """All values that are not contained in given list."""
  language_code_not_in: [String!]

  """All values less than the given value."""
  language_code_lt: String

  """All values less than or equal the given value."""
  language_code_lte: String

  """All values greater than the given value."""
  language_code_gt: String

  """All values greater than or equal the given value."""
  language_code_gte: String

  """All values containing the given string."""
  language_code_contains: String

  """All values not containing the given string."""
  language_code_not_contains: String

  """All values starting with the given string."""
  language_code_starts_with: String

  """All values not starting with the given string."""
  language_code_not_starts_with: String

  """All values ending with the given string."""
  language_code_ends_with: String

  """All values not ending with the given string."""
  language_code_not_ends_with: String
  quiz_every: QuizWhereInput
  quiz_some: QuizWhereInput
  quiz_none: QuizWhereInput
}

input QuestionWhereUniqueInput {
  id: ID
}

type Quiz implements Node {
  id: ID!
  title: String!
}

"""A connection to a list of items."""
type QuizConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuizEdge]!
  aggregate: AggregateQuiz!
}

input QuizCreateInput {
  id: ID
  title: String!
}

input QuizCreateManyInput {
  create: [QuizCreateInput!]
  connect: [QuizWhereUniqueInput!]
}

"""An edge in a connection."""
type QuizEdge {
  """The item at the end of the edge."""
  node: Quiz!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuizOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
}

type QuizPreviousValues {
  id: ID!
  title: String!
}

input QuizScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [QuizScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuizScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuizScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
}

type QuizSubscriptionPayload {
  mutation: MutationType!
  node: Quiz
  updatedFields: [String!]
  previousValues: QuizPreviousValues
}

input QuizSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuizSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuizSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuizSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuizWhereInput
}

input QuizUpdateDataInput {
  title: String
}

input QuizUpdateInput {
  title: String
}

input QuizUpdateManyDataInput {
  title: String
}

input QuizUpdateManyInput {
  create: [QuizCreateInput!]
  connect: [QuizWhereUniqueInput!]
  set: [QuizWhereUniqueInput!]
  disconnect: [QuizWhereUniqueInput!]
  delete: [QuizWhereUniqueInput!]
  update: [QuizUpdateWithWhereUniqueNestedInput!]
  updateMany: [QuizUpdateManyWithWhereNestedInput!]
  deleteMany: [QuizScalarWhereInput!]
  upsert: [QuizUpsertWithWhereUniqueNestedInput!]
}

input QuizUpdateManyMutationInput {
  title: String
}

input QuizUpdateManyWithWhereNestedInput {
  where: QuizScalarWhereInput!
  data: QuizUpdateManyDataInput!
}

input QuizUpdateWithWhereUniqueNestedInput {
  where: QuizWhereUniqueInput!
  data: QuizUpdateDataInput!
}

input QuizUpsertWithWhereUniqueNestedInput {
  where: QuizWhereUniqueInput!
  update: QuizUpdateDataInput!
  create: QuizCreateInput!
}

input QuizWhereInput {
  """Logical AND on all given filters."""
  AND: [QuizWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuizWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuizWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
}

input QuizWhereUniqueInput {
  id: ID
}

type Submission implements Node {
  id: ID!
  quiz(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
  user(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type SubmissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubmissionEdge]!
  aggregate: AggregateSubmission!
}

input SubmissionCreateInput {
  id: ID
  quiz: QuizCreateManyInput
  user: UserCreateManyInput
}

"""An edge in a connection."""
type SubmissionEdge {
  """The item at the end of the edge."""
  node: Submission!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubmissionOrderByInput {
  id_ASC
  id_DESC
}

type SubmissionPreviousValues {
  id: ID!
}

type SubmissionSubscriptionPayload {
  mutation: MutationType!
  node: Submission
  updatedFields: [String!]
  previousValues: SubmissionPreviousValues
}

input SubmissionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubmissionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubmissionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubmissionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubmissionWhereInput
}

input SubmissionUpdateInput {
  quiz: QuizUpdateManyInput
  user: UserUpdateManyInput
}

input SubmissionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubmissionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubmissionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubmissionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quiz_every: QuizWhereInput
  quiz_some: QuizWhereInput
  quiz_none: QuizWhereInput
  user_every: UserWhereInput
  user_some: UserWhereInput
  user_none: UserWhereInput
}

input SubmissionWhereUniqueInput {
  id: ID
}

type Subscription {
  submission(where: SubmissionSubscriptionWhereInput): SubmissionSubscriptionPayload
  answer(where: AnswerSubscriptionWhereInput): AnswerSubscriptionPayload
  quiz(where: QuizSubscriptionWhereInput): QuizSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyDataInput {
  name: String
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  name: String
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
}
